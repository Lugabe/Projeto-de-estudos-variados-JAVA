package bytebankHerdadoContaUtilTeste;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import bytebankHerdadoContaModelo.Cliente;
import bytebankHerdadoContaModelo.Conta;
import bytebankHerdadoContaModelo.ContaCorrente;
import bytebankHerdadoContaModelo.ContaPoupanca;

public class TestLambdas {

	public static void main(String[] args) {

		Conta cc1 = new ContaCorrente(22, 3);
		Cliente clienteCC1 = new Cliente();
		clienteCC1.setNome("Nico");
		cc1.setTitular(clienteCC1);
		cc1.deposita(333.0);

		Conta cc2 = new ContaPoupanca(22, 4);
		Cliente clienteCC2 = new Cliente();
		clienteCC2.setNome("Guilherme");
		cc2.setTitular(clienteCC2);
		cc2.deposita(444.0);

		Conta cc3 = new ContaCorrente(22, 1);
		Cliente clienteCC3 = new Cliente();
		clienteCC3.setNome("Paulo");
		cc3.setTitular(clienteCC3);
		cc3.deposita(111.0);

		Conta cc4 = new ContaPoupanca(22, 2);
		Cliente clienteCC4 = new Cliente();
		clienteCC4.setNome("Ana");
		cc4.setTitular(clienteCC4);
		cc4.deposita(222.0);

		List<Conta> lista = new ArrayList<>();
		lista.add(cc1);
		lista.add(cc2);
		lista.add(cc3);
		lista.add(cc4);

		
		// Lambada para comparar numero da conta
lista.sort((c1, c2) -> Integer.compare(c1.getNumero(), c2.getNumero()));
		// lambdas contendo um metodo não precisam usar o return.

lista.forEach((conta) -> System.out.println("Numero: "+conta.getNumero()));
		
		// um lambda menos enxuta
		Comparator<Conta> comp = ((Conta c1, Conta c2) -> { // Lambada para comparar nome do cliente
			String nameC1 = c1.getTitular().getName();
			String nameC2 = c2.getTitular().getName();
			return nameC1.compareTo(nameC2);
		});
		
lista.sort(comp);
		
lista.forEach((conta) -> System.out.println(conta + ", " + conta.getTitular().getName()));

	}
}
